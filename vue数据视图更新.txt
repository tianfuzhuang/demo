<template>
    <div>
        <Select v-model="id" style="width:200px">
            <Option v-for="item in list" :value="item.id" :key="item.id">{{item.name}}</Option>
        </Select>
        <Button type="primary" @click="change">异步</Button>
        <Divider />
        {{ary}}
        <Button type="primary" @click="changeAry">数组按钮</Button>
        <Divider />
        {{obj}}
        <Button type="primary" @click="changeObj">对象按钮</Button>
        <Divider>视图不更新情况三（异步更新队列）</Divider>
        {{message}}
        <Button type="primary" @click="messageUpdate">异步队列</Button>
    </div>
</template>

<script>
    export default {
        data(){
            return {
                id:'',
                list:[
                ],
                ary:[1,2,3],
                obj:{
                    name:'xiaoming',
                },
                message:'没有更新'
            }
        },
        methods:{
            change(){
                setTimeout(()=>{this.id = 1},2000)
                setTimeout(()=>{this.list = [{
                    id:1,
                    name:'小明',  
                },{
                    id:2,
                    name:'小红'
                }
                ]},3000)

            },
            changeAry(){
                // this.ary[1] = 0 //不更新视图
                // this.$set(this.ary,0,2)//解决办法1:Vue.set(ary, index, newValue) 方法将响应属性添加到嵌套的对象上
                // this.$forceUpdate()//进行强制渲染,使用场景:多层for循环嵌套时出现的页面没有及时刷新改变后的值的问题( 使用this.$forceUpdate() )因为数据层次太多，render函数没有自动更新，需手动强制刷新。
                //this.ary.splice(0,1,2)//解决办法3:
                //push()pop()shift()unshift()splice()sort()reverse()重写了原生的方法通过改变原型链来进行数组方法的重写 
                //filter(), concat(), slice() 。这些不会改变原始数组，但总是返回一个新数组。当使用非变异方法时，可以用新数组替换旧数组
            },
            changeObj(){
                this.obj.name = 18//不更新视图
                // this.$set(this.obj,'age',18)//解决办法Vue.set(object, key, value) 方法将响应属性添加到嵌套的对象上
                // Object.assign(this.obj, { a: 1, b: 2 })
                //assign 或 _.extend() 方法来添加属性的解决办法
                // this.obj = Object.assign({}, this.obj, { age: 18, b: 2 })  // 深拷贝

            },
            messageUpdate(){
                this.message = '更新完成'
                // console.log(this.$el.textContent)//"没有更新"
                this.$nextTick(function(){
                    console.log(this.$el.textContent)
                })

            }
            //当你把一个普通的 JavaScript 对象传入 Vue 实例作为 data 选项，Vue 将遍历此对象所有的 property，并使用 Object.defineProperty 把这些 property 全部转为 getter/setter。这些 getter/setter 对用户来说是不可见的，但是在内部它们让 Vue 能够追踪依赖，在 property 被访问和修改时通知变更。每个组件实例都对应一个 watcher 实例，它会在组件渲染的过程中把“接触”过的数据 property 记录为依赖。之后当依赖项的 setter 触发时，会通知 watcher，从而使它关联的组件重新渲染。
            /* Vue 在更新 DOM 时是异步执行的。只要侦听到数据变化，Vue 将开启一个队列，并缓冲在同一事件循环中发生的所有数据变更。如果同一个 watcher 被多次触发，只会被推入到队列中一次。这种在缓冲时去除重复数据对于避免不必要的计算和 DOM 操作是非常重要的。然后，在下一个的事件循环“tick”中，Vue 刷新队列并执行实际 (已去重的) 工作。Vue 在内部对异步队列尝试使用原生的 Promise.then、MutationObserver(监听DOM变化) 和 setImmediate(在循环事件任务完成后马上运行指定代码)，如果执行环境不支持，则会采用 setTimeout(fn, 0) 代替。简单来说，Vue 在修改数据后，视图不会立刻更新，而是等同一事件循环中的所有数据变化完成之后，再统一进行视图更新。

            例如，当你设置 vm.someData = 'new value'，该组件不会立即重新渲染。当刷新队列时，组件会在下一个事件循环“tick”中更新。多数情况我们不需要关心这个过程，但是如果你想基于更新后的 DOM 状态来做点什么，这就可能会有些棘手。虽然 Vue.js 通常鼓励开发人员使用“数据驱动”的方式思考，避免直接接触 DOM，但是有时我们必须要这么做。为了在数据变化之后等待 Vue 完成更新 DOM，可以在数据变化之后立即使用 Vue.nextTick(callback)。这样回调函数将在 DOM 更新完成后被调用.
 */
            

        }
        
    }
</script>

<style lang="scss" scoped>

</style>